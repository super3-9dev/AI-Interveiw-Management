using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InterviewBot.Migrations
{
    /// <inheritdoc />
    public partial class RenameResumeAnalysesToProfiles : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Check if Profiles table already exists, if not create it
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'Profiles') THEN
                        CREATE TABLE ""Profiles"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""UserId"" integer NOT NULL,
                            ""FileName"" character varying(255) NOT NULL,
                            ""FilePath"" character varying(500) NOT NULL,
                            ""FileHash"" character varying(100) NOT NULL,
                            ""TopicsMarkdown"" character varying(4000),
                            ""PossibleJobs"" character varying(1000),
                            ""MbaSubjectsToReinforce"" character varying(1000),
                            ""BriefIntroduction"" character varying(1000),
                            ""CurrentActivities"" character varying(1000),
                            ""AnalysisDate"" timestamp with time zone NOT NULL,
                            ""Status"" character varying(50) NOT NULL,
                            ""ErrorMessage"" character varying(1000),
                            ""Progress"" integer NOT NULL,
                            ""ProcessingTime"" interval,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""UpdatedAt"" timestamp with time zone,
                            CONSTRAINT ""PK_Profiles"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Profiles_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                        );
                        
                        CREATE INDEX ""IX_Profiles_UserId"" ON ""Profiles"" (""UserId"");
                    END IF;
                END $$;
            ");

            // Copy all data from ResumeAnalyses to Profiles (only if ResumeAnalyses exists and has data)
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'ResumeAnalyses') THEN
                        IF NOT EXISTS (SELECT 1 FROM ""Profiles"" LIMIT 1) THEN
                            INSERT INTO ""Profiles"" (""Id"", ""UserId"", ""FileName"", ""FilePath"", ""FileHash"", ""TopicsMarkdown"", ""PossibleJobs"", ""MbaSubjectsToReinforce"", ""BriefIntroduction"", ""CurrentActivities"", ""AnalysisDate"", ""Status"", ""ErrorMessage"", ""Progress"", ""ProcessingTime"", ""CreatedAt"", ""UpdatedAt"")
                            SELECT ""Id"", ""UserId"", ""FileName"", ""FilePath"", ""FileHash"", ""TopicsMarkdown"", ""PossibleJobs"", ""MbaSubjectsToReinforce"", ""BriefIntroduction"", ""CurrentActivities"", ""AnalysisDate"", ""Status"", ""ErrorMessage"", ""Progress"", ""ProcessingTime"", ""CreatedAt"", ""UpdatedAt""
                            FROM ""ResumeAnalyses"";
                        END IF;
                    END IF;
                END $$;
            ");

            // Drop the old ResumeAnalyses table if it exists
            migrationBuilder.Sql(@"
                DROP TABLE IF EXISTS ""ResumeAnalyses"";
            ");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Profiles");

            migrationBuilder.CreateTable(
                name: "ResumeAnalyses",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    AnalysisDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    BriefIntroduction = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    CurrentActivities = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    ErrorMessage = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    FileHash = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    FileName = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    FilePath = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    MbaSubjectsToReinforce = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    PossibleJobs = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    ProcessingTime = table.Column<TimeSpan>(type: "interval", nullable: true),
                    Progress = table.Column<int>(type: "integer", nullable: false),
                    Status = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    TopicsMarkdown = table.Column<string>(type: "character varying(4000)", maxLength: 4000, nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResumeAnalyses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResumeAnalyses_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_ResumeAnalyses_UserId",
                table: "ResumeAnalyses",
                column: "UserId");

            // Copy data back from Profiles to ResumeAnalyses
            migrationBuilder.Sql(@"
                INSERT INTO ""ResumeAnalyses"" (""Id"", ""UserId"", ""FileName"", ""FilePath"", ""FileHash"", ""TopicsMarkdown"", ""PossibleJobs"", ""MbaSubjectsToReinforce"", ""BriefIntroduction"", ""CurrentActivities"", ""AnalysisDate"", ""Status"", ""ErrorMessage"", ""Progress"", ""ProcessingTime"", ""CreatedAt"", ""UpdatedAt"")
                SELECT ""Id"", ""UserId"", ""FileName"", ""FilePath"", ""FileHash"", ""TopicsMarkdown"", ""PossibleJobs"", ""MbaSubjectsToReinforce"", ""BriefIntroduction"", ""CurrentActivities"", ""AnalysisDate"", ""Status"", ""ErrorMessage"", ""Progress"", ""ProcessingTime"", ""CreatedAt"", ""UpdatedAt""
                FROM ""Profiles"";
            ");

            // Drop the Profiles table
            migrationBuilder.DropTable(
                name: "Profiles");
        }
    }
}
