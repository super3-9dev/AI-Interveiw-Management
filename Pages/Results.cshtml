@page
@model InterviewBot.Pages.ResultsModel
@using Microsoft.AspNetCore.Mvc.Localization
@using InterviewBot.Models
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Your Personalized Career Guidance";
}

@section Styles {
    <style>
        .results-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: #f8fafc;
            min-height: 100vh;
        }

        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e40af;
            margin-bottom: 0.5rem;
        }

        .page-subtitle {
            font-size: 1.125rem;
            color: #6b7280;
            margin-bottom: 1rem;
        }

        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .results-section {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .results-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .section-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f3f4f6;
        }

        .section-icon {
            font-size: 2rem;
            width: 3rem;
            height: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            border-radius: 50%;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1f2937;
            margin: 0;
        }

        .results-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .result-item {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 0.75rem;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
        }

        .result-item:hover {
            background: #f1f5f9;
            border-color: #cbd5e1;
            transform: translateX(4px);
        }

        .result-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }

        .result-meta {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 0.75rem;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .result-status {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .status-completed {
            background: #dcfce7;
            color: #166534;
        }

        .status-in-progress {
            background: #fef3c7;
            color: #92400e;
        }

        .status-failed {
            background: #fee2e2;
            color: #991b1b;
        }

        .result-description {
            color: #4b5563;
            margin-bottom: 1rem;
            line-height: 1.5;
        }

        .result-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.2s ease;
            border: none;
            cursor: pointer;
            font-size: 0.875rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .btn-success:hover {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .external-api-badge {
            display: inline-block;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 500;
            margin-left: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .external-api-result {
            border-left: 4px solid #10b981;
            background: linear-gradient(135deg, #f0fdf4 0%, #f8fafc 100%);
        }

        .external-api-preview {
            background: #f0fdf4;
            border: 1px solid #bbf7d0;
            border-radius: 0.5rem;
            padding: 1rem;
            margin: 1rem 0;
        }

        .preview-header {
            color: #065f46;
            font-size: 0.875rem;
            margin-bottom: 0.75rem;
        }

        .preview-content {
            font-size: 0.875rem;
        }

        .preview-item {
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: white;
            border-radius: 0.25rem;
            border: 1px solid #d1fae5;
        }

        .preview-item strong {
            color: #065f46;
            display: inline-block;
            min-width: 120px;
        }

        .preview-more {
            color: #6b7280;
            font-style: italic;
            text-align: center;
            padding: 0.5rem;
            background: #f9fafb;
            border-radius: 0.25rem;
            margin-top: 0.5rem;
        }

        .preview-raw {
            background: white;
            padding: 0.75rem;
            border-radius: 0.25rem;
            border: 1px solid #d1fae5;
            font-family: monospace;
            font-size: 0.75rem;
            color: #374151;
            max-height: 150px;
            overflow-y: auto;
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 1rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }

        .empty-description {
            color: #6b7280;
            margin-bottom: 2rem;
            font-size: 1.125rem;
        }

        .create-first-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            text-decoration: none;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .create-first-btn:hover {
            background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
        }

        .bottom-actions {
            text-align: center;
            margin-top: 3rem;
            padding: 2rem;
            background: white;
            border-radius: 1rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }

        .bottom-actions h3 {
            color: #1f2937;
            margin-bottom: 1rem;
        }

        .bottom-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn-outline {
            background: transparent;
            color: #3b82f6;
            border: 2px solid #3b82f6;
            padding: 0.75rem 1.5rem;
        }

        .btn-outline:hover {
            background: #3b82f6;
            color: white;
            transform: translateY(-1px);
        }

        @@media (max-width: 768px) {
            .results-container {
                padding: 1rem;
            }

            .page-title {
                font-size: 2rem;
            }

            .results-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .results-section {
                padding: 1.5rem;
            }

            .bottom-buttons {
                flex-direction: column;
                align-items: center;
            }

            .btn {
                width: 100%;
                max-width: 300px;
                justify-content: center;
            }
        }
    </style>
}

<div class="results-container">
    <div class="page-header">
        <h1 class="page-title">Your Personalized Career Guidance</h1>
        <p class="page-subtitle">Based on your profile and interview, here are your tailored insights and potential career roadmaps.</p>
    </div>

    @if (Model.Profiles.Any() || Model.InterviewSessions.Any())
    {
        <div class="results-grid">
            <!-- Resume Analysis Results -->
            <div class="results-section">
                <div class="section-header">
                    <div class="section-icon">📊</div>
                    <h2 class="section-title">Resume Analyses</h2>
                </div>

                @if (Model.Profiles.Any())
                {
                    <ul class="results-list">
                        @foreach (var profile in Model.Profiles)
                        {
                            <li class="result-item @(profile.Status == "Completed" && !string.IsNullOrEmpty(profile.ExternalAPIResponse) ? "external-api-result" : "")">
                                <div class="result-title">Profile #@profile.Id</div>
                                <div class="result-meta">
                                    <span>@profile.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    @if (profile.Status == "Completed")
                                    {
                                        <span class="result-status status-completed">Completed</span>
                                    }
                                    else if (profile.Status == "Processing")
                                    {
                                        <span class="result-status status-in-progress">Processing</span>
                                    }
                                    else
                                    {
                                        <span class="result-status status-failed">Failed</span>
                                    }
                                </div>
                                <div class="result-description">
                                    @if (profile.Status == "Completed")
                                    {
                                        <span>Analysis completed successfully</span>
                                        @if (!string.IsNullOrEmpty(profile.ExternalAPIResponse))
                                        {
                                            <span class="external-api-badge">External API Data Available</span>
                                        }
                                    }
                                    else if (profile.Status == "Processing")
                                    {
                                        <span>Analysis in progress... @profile.Progress% complete</span>
                                    }
                                    else
                                    {
                                        <span>Analysis failed. Please try again.</span>
                                    }
                                </div>
                                
                                @if (profile.Status == "Completed" && !string.IsNullOrEmpty(profile.ExternalAPIResponse))
                                {
                                    <div class="external-api-preview">
                                        <div class="preview-header">
                                            <strong>External API Response Preview:</strong>
                                        </div>
                                        <div class="preview-content">
                                            @{
                                                try
                                                {
                                                                                                    var externalData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(profile.ExternalAPIResponse ?? "");
                                                if (externalData != null)
                                                {
                                                    foreach (var item in externalData.Take(3))
                                                    {
                                                        <div class="preview-item">
                                                            <strong>@item.Key:</strong> 
                                                            <span>@(item.Value?.ToString()?.Length > 100 ? item.Value.ToString().Substring(0, 100) + "..." : item.Value?.ToString())</span>
                                                        </div>
                                                    }
                                                    if (externalData.Count > 3)
                                                    {
                                                        <div class="preview-more">... and @(externalData.Count - 3) more fields</div>
                                                    }
                                                }
                                                }
                                                catch
                                                {
                                                    <div class="preview-raw">@(profile.ExternalAPIResponse.Length > 200 ? profile.ExternalAPIResponse.Substring(0, 200) + "..." : profile.ExternalAPIResponse)</div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                <div class="result-actions">
                                    @if (profile.Status == "Completed")
                                    {
                                        <a href="/ResumeAnalysisResults/@profile.Id" class="btn btn-primary">View Results</a>
                                    }
                                    else if (profile.Status == "Failed")
                                    {
                                        <a href="/ResumeAnalysisResults/@profile.Id" class="btn btn-secondary">Retry</a>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">📄</div>
                        <div class="empty-title">No Resume Analyses Yet</div>
                        <div class="empty-description">Start by uploading your resume for AI analysis</div>
                        <a href="/NewAnalysis" class="create-first-btn">Start New Analysis</a>
                    </div>
                }
            </div>

            <!-- External API Results -->
            @if (Model.Profiles.Any(p => !string.IsNullOrEmpty(p.ExternalAPIResponse)))
            {
                <div class="results-section">
                    <div class="section-header">
                        <div class="section-icon">🌐</div>
                        <h2 class="section-title">External API Analysis</h2>
                    </div>
                    <ul class="results-list">
                        @foreach (var profile in Model.Profiles.Where(p => !string.IsNullOrEmpty(p.ExternalAPIResponse)))
                        {
                            <li class="result-item external-api-result">
                                <div class="result-title">External Analysis #@profile.Id</div>
                                <div class="result-meta">
                                    <span>@profile.UpdatedAt?.ToString("MMM dd, yyyy")</span>
                                    <span class="result-status status-completed">API Response Received</span>
                                </div>
                                <div class="result-description">
                                    <span>External platform analysis completed</span>
                                </div>
                                
                                <!-- External API Response Preview -->
                                <div class="external-api-preview">
                                    <div class="preview-header">
                                        <strong>External API Response Preview:</strong>
                                    </div>
                                    <div class="preview-content">
                                        @{
                                            try
                                            {
                                                var externalData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(profile.ExternalAPIResponse ?? "");
                                                if (externalData != null)
                                                {
                                                    foreach (var item in externalData.Take(3))
                                                    {
                                                        <div class="preview-item">
                                                            <strong>@item.Key:</strong> 
                                                            <span>@(item.Value?.ToString()?.Length > 100 ? item.Value.ToString().Substring(0, 100) + "..." : item.Value?.ToString())</span>
                                                        </div>
                                                    }
                                                    if (externalData.Count > 3)
                                                    {
                                                        <div class="preview-more">... and @(externalData.Count - 3) more fields</div>
                                                    }
                                                }
                                            }
                                            catch
                                            {
                                                <div class="preview-raw">@(profile.ExternalAPIResponse.Length > 200 ? profile.ExternalAPIResponse.Substring(0, 200) + "..." : profile.ExternalAPIResponse)</div>
                                            }
                                        }
                                    </div>
                                </div>
                                
                                <div class="result-actions">
                                    <a href="/ExternalAPIResults?id=@profile.Id" class="btn btn-success">View API Results</a>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }

            <!-- Interview Results -->
            <div class="results-section">
                <div class="section-header">
                    <div class="section-icon">🎯</div>
                    <h2 class="section-title">Interview Sessions</h2>
                </div>

                @if (Model.InterviewSessions.Any())
                {
                    <ul class="results-list">
                        @foreach (var session in Model.InterviewSessions)
                        {
                            <li class="result-item">
                                <div class="result-title">
                                    @(session.InterviewCatalog?.Title ?? session.CustomInterview?.Title ?? "Interview Session")
                                </div>
                                <div class="result-meta">
                                    <span>@session.StartTime.ToString("MMM dd, yyyy")</span>
                                    <span
                                        class="result-status @(session.Status == InterviewStatus.Completed ? "status-completed" : session.Status == InterviewStatus.InProgress ? "status-in-progress" : "status-failed")">
                                        @session.Status
                                    </span>
                                </div>
                                <div class="result-description">
                                    @if (session.Status == InterviewStatus.Completed)
                                    {
                                        <span>Interview completed. Score: @(session.Score?.ToString() ?? "N/A")/100</span>
                                    }
                                    else if (session.Status == InterviewStatus.InProgress)
                                    {
                                        <span>Interview in progress. Question @session.CurrentQuestionNumber</span>
                                    }
                                    else
                                    {
                                        <span>Interview @session.Status.ToString().ToLower()</span>
                                    }
                                </div>
                                <div class="result-actions">
                                    @if (session.Status == InterviewStatus.Completed)
                                    {
                                        <a href="/InterviewResults?id=@session.Id" class="btn btn-primary">View Results</a>
                                    }
                                    else if (session.Status == InterviewStatus.InProgress)
                                    {
                                        <a href="/InterviewSession?id=@session.Id" class="btn btn-secondary">Continue</a>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">🎤</div>
                        <div class="empty-title">No Interview Sessions Yet</div>
                        <div class="empty-description">Start your first interview to see results here</div>
                        <a href="/CustomInterview" class="create-first-btn">Start Interview</a>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Complete Empty State -->
        <div class="empty-state">
            <div class="empty-icon">📋</div>
            <div class="empty-title">No Results Yet</div>
            <div class="empty-description">Get started by analyzing your resume or taking an interview</div>
            <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                <a href="/NewAnalysis" class="create-first-btn">Analyze Resume</a>
                <a href="/CustomInterview" class="create-first-btn">Start Interview</a>
            </div>
        </div>
    }

    <!-- Bottom Action Buttons -->
    <div class="bottom-actions">
        <h3>Ready for More?</h3>
        <div class="bottom-buttons">
            <a href="/Dashboard" class="btn btn-outline">Back to Dashboard</a>
            <a href="/NewAnalysis" class="btn btn-primary">Start New Analysis</a>
        </div>
    </div>
</div>
