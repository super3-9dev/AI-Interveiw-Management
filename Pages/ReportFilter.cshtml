@page
@model InterviewBot.Pages.ReportFilterModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Report Filter"];
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
        }
        
        .filter-container {
            max-width: 600px;
            margin: 2rem auto;
            padding: 2rem;
        }
        
        .filter-card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 2rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
        }
        
        .form-control {
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            padding: 0.75rem;
            font-size: 1rem;
        }
        
        .form-control:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .btn-primary {
            background-color: #3b82f6;
            border-color: #3b82f6;
            padding: 0.75rem 2rem;
            font-weight: 600;
            border-radius: 0.5rem;
        }
        
        .btn-primary:hover {
            background-color: #2563eb;
            border-color: #2563eb;
        }
        
        .btn-secondary {
            background-color: #6b7280;
            border-color: #6b7280;
            padding: 0.75rem 2rem;
            font-weight: 600;
            border-radius: 0.5rem;
            margin-right: 1rem;
        }
        
        .btn-secondary:hover {
            background-color: #4b5563;
            border-color: #4b5563;
        }
        
        .loading-spinner {
            display: none;
        }
        
        .loading-spinner.show {
            display: inline-block;
        }
    </style>
}

<div class="filter-container">
    <div class="filter-card">
        <div class="text-center mb-4">
            <h1 class="h2 mb-2">@Localizer["Report Filter"]</h1>
            <p class="text-muted">@Localizer["Select a date range to generate your personalized report"]</p>
        </div>
        
        <form method="post" id="filterForm">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="fromDate" class="form-label">@Localizer["From Date"]</label>
                        <input type="date" class="form-control" id="fromDate" name="FromDate" 
                               value="@Model.FromDate?.ToString("yyyy-MM-dd")" required>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="toDate" class="form-label">@Localizer["To Date"]</label>
                        <input type="date" class="form-control" id="toDate" name="ToDate" 
                               value="@Model.ToDate?.ToString("yyyy-MM-dd")" required>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="includeAllData" name="IncludeAllData" 
                           @(Model.IncludeAllData ? "checked" : "")>
                    <label class="form-check-label" for="includeAllData">
                        @Localizer["Include all available data (ignore date filter)"]
                    </label>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    @Model.ErrorMessage
                </div>
            }
            
            <div class="text-center">
                <button type="button" class="btn btn-secondary" onclick="goBack()">
                    <i class="bi bi-arrow-left"></i> @Localizer["Back"]
                </button>
                <button type="submit" class="btn btn-primary" id="viewReportBtn">
                    <span class="loading-spinner spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <i class="bi bi-graph-up"></i> @Localizer["View Report"]
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('includeAllData').addEventListener('change', function() {
            const fromDate = document.getElementById('fromDate');
            const toDate = document.getElementById('toDate');
            
            if (this.checked) {
                fromDate.disabled = true;
                toDate.disabled = true;
                fromDate.required = false;
                toDate.required = false;
            } else {
                fromDate.disabled = false;
                toDate.disabled = false;
                fromDate.required = true;
                toDate.required = true;
            }
        });
        
        document.getElementById('filterForm').addEventListener('submit', function() {
            const submitBtn = document.getElementById('viewReportBtn');
            const spinner = submitBtn.querySelector('.loading-spinner');
            
            submitBtn.disabled = true;
            spinner.classList.add('show');
        });
        
        function goBack() {
            window.history.back();
        }
        
        // Set default date range (last 30 days)
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
            
            if (!document.getElementById('fromDate').value) {
                document.getElementById('fromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
            }
            if (!document.getElementById('toDate').value) {
                document.getElementById('toDate').value = today.toISOString().split('T')[0];
            }
        });
    </script>
}
