@page
@model InterviewBot.Pages.InterviewResultsModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Interview Results"];
    var currentCulture = HttpContext.Request.Query["culture"].ToString();
    if (string.IsNullOrEmpty(currentCulture))
    {
        currentCulture = HttpContext.Request.Cookies["culture"] ?? "en";
    }
}

<div class="interview-results-container">
    <!-- Results Header -->
    <div class="results-header">
        <div class="header-content">
            <div class="results-info">
                <h1 class="results-title">
                    <i class="bi bi-check-circle-fill"></i>
                    Interview Complete
                </h1>
                <p class="results-subtitle">Your interview results and analysis</p>
            </div>
            <div class="results-status">
                <span class="status-badge status-complete">Completed</span>
                <span class="question-count">@Model.QuestionCount Questions Asked</span>
            </div>
        </div>
    </div>

    <!-- Interview Summary -->
    <div class="results-content">
        <div class="summary-section">
            <div class="section-header">
                <h2><i class="bi bi-clipboard-data"></i> Interview Summary</h2>
            </div>
            <div class="summary-content">
                <div class="interview-details">
                    <div class="detail-item">
                        <span class="detail-label">Topic:</span>
                        <span class="detail-value">@Model.InterviewTopic</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Questions Asked:</span>
                        <span class="detail-value">@Model.QuestionCount</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Completed:</span>
                        <span class="detail-value">@(Model.CompleteDate?.ToString("MMM dd, yyyy 'at' h:mm tt") ??
                                                        DateTime.Now.ToString("MMM dd, yyyy 'at' h:mm tt"))</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- AI Analysis -->
        <div class="analysis-section">
            <div class="section-header">
                <h2><i class="bi bi-robot"></i> AI Analysis & Recommendations</h2>
            </div>
            <div class="analysis-content">
                <div class="analysis-text">
                    @Html.Raw(Model.InterviewSummary.Replace("\n", "<br/>"))
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-section">
            <div class="action-buttons">
                <a href="/Dashboard@(!string.IsNullOrEmpty(currentCulture) ? $"?culture={currentCulture}" : "")"
                    class="btn btn-primary action-btn">
                    <i class="bi bi-house"></i>
                    Back to Dashboard
                </a>
                <button class="btn btn-success action-btn" onclick="downloadResults()">
                    <i class="bi bi-download"></i>
                    Download Results
                </button>
                <a href="/CustomInterview@(!string.IsNullOrEmpty(currentCulture) ? $"?culture={currentCulture}" : "")"
                    class="btn btn-outline-primary action-btn">
                    <i class="bi bi-plus-circle"></i>
                    Start New Interview
                </a>
            </div>
        </div>
    </div>
</div>

<style>
    .interview-results-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2rem 0;
    }

    /* Results Header */
    .results-header {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 3rem 2rem;
        box-shadow: 0 4px 20px rgba(16, 185, 129, 0.3);
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .results-info h1 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .results-subtitle {
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
        font-size: 1.2rem;
    }

    .results-status {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: flex-end;
    }

    .status-badge {
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        font-size: 1rem;
        font-weight: 600;
        text-align: center;
    }

    .status-complete {
        background-color: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid rgba(255, 255, 255, 0.3);
    }

    .question-count {
        background-color: rgba(255, 255, 255, 0.15);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 1.5rem;
        font-size: 0.9rem;
        font-weight: 500;
    }

    /* Results Content */
    .results-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    /* Summary Section */
    .summary-section {
        background: white;
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #10b981;
    }

    .section-header {
        margin-bottom: 1.5rem;
    }

    .section-header h2 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .interview-details {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
    }

    .detail-label {
        font-weight: 600;
        color: #6b7280;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .detail-value {
        font-weight: 500;
        color: #1f2937;
        font-size: 1rem;
    }

    /* Analysis Section */
    .analysis-section {
        background: white;
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #3b82f6;
    }

    .analysis-content {
        margin-top: 1rem;
    }

    .analysis-text {
        line-height: 1.8;
        color: #374151;
        font-size: 1rem;
        white-space: pre-line;
    }

    /* Action Section */
    .action-section {
        background: white;
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 1rem 2rem;
        border-radius: 0.75rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
        text-decoration: none;
        border: none;
        cursor: pointer;
        font-size: 1rem;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        text-decoration: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
    }

    .btn-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .btn-outline-primary {
        background: transparent;
        color: #3b82f6;
        border: 2px solid #3b82f6;
    }

    .btn-outline-primary:hover {
        background: #3b82f6;
        color: white;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 2rem;
            text-align: center;
        }

        .results-info h1 {
            font-size: 2rem;
        }

        .results-content {
            padding: 1rem;
        }

        .summary-section,
        .analysis-section,
        .action-section {
            padding: 1.5rem;
        }

        .action-buttons {
            flex-direction: column;
            align-items: center;
        }

        .action-btn {
            width: 100%;
            max-width: 300px;
            justify-content: center;
        }
    }

    @@media (max-width: 480px) {
        .results-header {
            padding: 2rem 1rem;
        }

        .results-info h1 {
            font-size: 1.75rem;
        }

        .interview-details {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    function downloadResults() {
        // Create a text file with the interview results
        const content = `Interview Results
================

Topic: @Model.InterviewTopic
Questions Asked: @Model.QuestionCount
Completed: @DateTime.Now.ToString("MMM dd, yyyy 'at' h:mm tt")

AI Analysis & Recommendations:
=============================

@Model.InterviewSummary

---
Generated by AI Interview Management System
`;

        const blob = new Blob([content], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `interview-results-${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
