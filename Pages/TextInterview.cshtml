@page
@model InterviewBot.Pages.TextInterviewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Text Interview"];
    var currentCulture = HttpContext.Request.Query["culture"].ToString();
    if (string.IsNullOrEmpty(currentCulture))
    {
        currentCulture = HttpContext.Request.Cookies["culture"] ?? "en";
    }
}

<script>
    // Make interviewId available to JavaScript
    window.interviewId = '@Model.InterviewId';
</script>

<div class="text-interview-container">
    <!-- Interview Header -->
    <div class="interview-header">
        <div class="header-content">
            <div class="interview-info">
                <h1 class="interview-title">
                    <i class="bi bi-robot"></i>
                    @Model.InterviewTopic
                </h1>
                <p class="interview-subtitle">@Localizer["AI-powered text interview with OpenAI - Real-time conversation"]</p>
            </div>
            <div class="interview-status">
                <span class="status-badge status-active">@Localizer["In Progress"]</span>
            </div>
        </div>
    </div>

    <!-- Chat Area -->
    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <!-- AI Welcome Message -->
            <div class="chat-message ai-message">
                <div class="message-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-sender">@Localizer["AI Career Coach"]</span>
                        <span class="message-time" id="currentTime"></span>
                    </div>
                    <div class="message-text">
                        @Model.GreetingMessage @Model.CurrentQuestion
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Input Area -->
    <div class="input-container">
        <div class="input-wrapper">
            <form method="post" class="chat-form" id="chatForm">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="InterviewId" />
                <div class="input-group">
                    <textarea asp-for="UserAnswer" style="border-radius: 10px;" class="chat-input"
                        placeholder="@Localizer["Type your answer here..."]" rows="3" id="userInput"></textarea>
                    <button type="button" class="send-button" id="sendButton" onclick="sendMessage()">
                        <i class="bi bi-send"></i>
                    </button>
                </div>
                <span asp-validation-for="UserAnswer" class="text-danger"></span>
            </form>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons">
        <a href="/Dashboard@(!string.IsNullOrEmpty(currentCulture) ? $"?culture={currentCulture}" : "")"
            class="btn btn-outline-secondary action-btn">
            <i class="bi bi-arrow-left"></i>
            @Localizer["Back to Dashboard"]
        </a>
        <button class="btn btn-danger action-btn" onclick="finishInterview()">
            <i class="bi bi-arrow-left"></i>
            @Localizer["Finish Interview"]
        </button>
    </div>
</div>

<style>
    .text-interview-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #f8f9fa;
    }

    /* Interview Header */
    .interview-header {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        padding: 1.5rem 2rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
    }

    .interview-info h1 {
        margin: 0;
        font-size: 1.75rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .interview-subtitle {
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
        font-size: 1rem;
    }

    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .status-active {
        background-color: rgba(34, 197, 94, 0.2);
        color: #22c55e;
        border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .question-counter {
        background-color: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
        border: 1px solid rgba(59, 130, 246, 0.3);
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        font-weight: 500;
        margin-left: 1rem;
    }

    /* Chat Container */
    .chat-container {
        flex: 1;
        overflow-y: auto;
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
        width: 100%;
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Chat Message Styles */
    .chat-message {
        display: flex;
        gap: 1rem;
        max-width: 80%;
        animation: fadeInUp 0.3s ease-out;
    }

    .ai-message {
        align-self: flex-start;
    }

    .user-message {
        align-self: flex-end;
        flex-direction: row-reverse;
    }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .ai-message .message-avatar {
        background-color: #3b82f6;
        color: white;
    }

    .user-message .message-avatar {
        background-color: #10b981;
        color: white;
    }

    .message-avatar i {
        font-size: 1.2rem;
    }

    .message-content {
        background-color: white;
        padding: 1rem 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        min-width: 300px;
    }

    .ai-message .message-content {
        border-bottom-left-radius: 0.25rem;
    }

    .user-message .message-content {
        border-bottom-right-radius: 0.25rem;
        background-color: #3b82f6;
        color: white;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        opacity: 0.8;
    }

    .message-sender {
        font-weight: 600;
    }

    .message-time {
        font-size: 0.75rem;
    }

    .message-text {
        line-height: 1.6;
        margin-bottom: 1rem;
    }

    /* Typing Indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background-color: #f3f4f6;
        border-radius: 1rem;
        font-size: 0.875rem;
        color: #6b7280;
        max-width: 120px;
    }

    .typing-dots {
        display: flex;
        gap: 0.25rem;
    }

    .typing-dot {
        width: 6px;
        height: 6px;
        background-color: #9ca3af;
        border-radius: 50%;
        animation: typing 1.4s infinite ease-in-out;
    }

    .typing-dot:nth-child(1) {
        animation-delay: -0.32s;
    }

    .typing-dot:nth-child(2) {
        animation-delay: -0.16s;
    }

    /* Input Container */
    .input-container {
        padding: 1.5rem 2rem;
        background-color: white;
        border-top: 1px solid #e9ecef;
    }

    .input-wrapper {
        max-width: 1200px;
        margin: 0 auto;
    }

    .chat-form {
        width: 100%;
    }

    .input-group {
        display: flex;
        gap: 1rem;
        align-items: flex-end;
    }

    .chat-input {
        flex: 1;
        padding: 1rem;
        border: 2px solid #e9ecef;
        border-radius: 0.75rem !important;
        font-size: 1rem;
        line-height: 1.5;
        resize: vertical;
        transition: border-color 0.2s ease;
        outline: none;
        min-height: 60px;
    }

    .chat-input:focus {
        border-color: #3b82f6;
    }

    .send-button {
        width: 50px;
        height: 50px;
        border-radius: 0 50% 50% 50% !important;

        background-color: #3b82f6;
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        flex-shrink: 0;
    }

    .send-button:hover {
        background-color: #1d4ed8;
        transform: scale(1.05);
    }

    .send-button:disabled {
        background-color: #9ca3af;
        cursor: not-allowed;
        transform: none;
    }

    .send-button i {
        font-size: 1.2rem;
    }

    /* Action Buttons */
    .action-buttons {
        padding: 1.5rem 2rem;
        background-color: white;
        border-top: 1px solid #e9ecef;
        display: flex;
        justify-content: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    /* Animations */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes typing {

        0%,
        80%,
        100% {
            transform: scale(0.8);
            opacity: 0.5;
        }

        40% {
            transform: scale(1);
            opacity: 1;
        }
    }

    /* Interview Completion Styles */
    .interview-completion-banner {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 2rem;
        border-radius: 1rem;
        margin: 1rem 0;
        text-align: center;
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    .completion-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .completion-header i {
        font-size: 2rem;
        color: #34d399;
    }

    .completion-header h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .interview-summary {
        background: white;
        border-radius: 1rem;
        padding: 2rem;
        margin: 1rem 0;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #10b981;
    }

    .summary-content h4 {
        color: #1f2937;
        margin-bottom: 1rem;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .summary-text {
        line-height: 1.8;
        color: #374151;
        white-space: pre-line;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .chat-container {
            padding: 1rem;
        }

        .chat-message {
            max-width: 95%;
        }

        .input-container {
            padding: 1rem;
        }

        .action-buttons {
            flex-direction: column;
            align-items: center;
        }

        .action-btn {
            width: 100%;
            max-width: 300px;
            justify-content: center;
        }
    }

    @@media (max-width: 480px) {
        .interview-header {
            padding: 1rem;
        }

        .interview-info h1 {
            font-size: 1.5rem;
        }

        .chat-container {
            padding: 0.5rem;
        }

        .input-container {
            padding: 1rem;
        }

        .action-buttons {
            padding: 1rem;
        }
    }
</style>

<script>
    let isWaitingForResponse = false;
    let messageHistory = [];

    // Initialize current time
    document.addEventListener('DOMContentLoaded', function () {
        updateCurrentTime();
        setInterval(updateCurrentTime, 1000);

        // Add initial AI message to history
        messageHistory.push({
            type: 'ai',
            text: '@Model.GreetingMessage @Model.CurrentQuestion',
            timestamp: new Date()
        });

        // Enable enter key to send message
        document.getElementById('userInput').addEventListener('keydown', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    });

    function updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString();
        document.getElementById('currentTime').textContent = timeString;
    }

    async function sendMessage() {
        const userInput = document.getElementById('userInput');
        const message = userInput.value.trim();

        if (!message || isWaitingForResponse) return;

        // Add user message to chat
        addUserMessage(message);

        // Clear input and disable send button
        userInput.value = '';
        setSendButtonState(false);

        // Show typing indicator
        showTypingIndicator();

        // Add to message history
        messageHistory.push({
            type: 'user',
            text: message,
            timestamp: new Date()
        });

        try {
            // Call OpenAI API for response
            const response = await getOpenAIResponse(message);

            // Remove typing indicator
            hideTypingIndicator();

            // Check if interview is complete or terminated
            if (response.isComplete || response.isTerminated) {
                // Add AI response to chat
                addAIMessage(response.response);

                // Redirect to results page after a short delay
                setTimeout(() => {
                    const currentCulture = new URLSearchParams(window.location.search).get('culture') || 'en';
                    const resultsUrl = `/InterviewResults?InterviewId=@Model.InterviewId&Summary=${encodeURIComponent(response.summary)}&QuestionCount=${response.questionCount || 10}&culture=${currentCulture}`;
                    window.location.href = resultsUrl;
                }, 4000);

                // Disable input
                setSendButtonState(false);
                document.getElementById('userInput').disabled = true;
            } else {
                // Add AI response to chat
                addAIMessage(response.response);
            }

            // Add to message history
            messageHistory.push({
                type: 'ai',
                text: response.response,
                timestamp: new Date()
            });

        } catch (error) {
            console.error('Error getting AI response:', error);
            hideTypingIndicator();
            addErrorMessage('Sorry, I encountered an error. Please try again.');
        }

        // Re-enable send button
        setSendButtonState(true);
    }

    function addUserMessage(text) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message user-message';

        const now = new Date();
        const timeString = now.toLocaleTimeString();

        messageDiv.innerHTML = `
            <div class="message-avatar">
                <i class="bi bi-person"></i>
            </div>
            <div class="message-content">
                <div class="message-header">
                    <span class="message-sender">You</span>
                    <span class="message-time">${timeString}</span>
                </div>
                <div class="message-text">${text}</div>
            </div>
        `;

        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }

    function addAIMessage(text) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message ai-message';

        const now = new Date();
        const timeString = now.toLocaleTimeString();

        messageDiv.innerHTML = `
            <div class="message-avatar">
                <i class="bi bi-robot"></i>
            </div>
            <div class="message-content">
                <div class="message-header">
                    <span class="message-sender">AI Career Coach</span>
                    <span class="message-time">${timeString}</span>
                </div>
                <div class="message-text">${text}</div>
            </div>
        `;

        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }

    function addErrorMessage(text) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message ai-message';

        const now = new Date();
        const timeString = now.toLocaleTimeString();

        messageDiv.innerHTML = `
            <div class="message-avatar">
                <i class="bi bi-exclamation-triangle"></i>
            </div>
            <div class="message-content">
                <div class="message-header">
                    <span class="message-sender">System</span>
                    <span class="message-time">${timeString}</span>
                </div>
                <div class="message-text">${text}</div>
            </div>
        `;

        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }

    function showTypingIndicator() {
        const chatMessages = document.getElementById('chatMessages');
        const typingDiv = document.createElement('div');
        typingDiv.className = 'chat-message ai-message';
        typingDiv.id = 'typingIndicator';

        typingDiv.innerHTML = `
            <div class="message-avatar">
                <i class="bi bi-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <span>AI is typing</span>
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            </div>
        `;

        chatMessages.appendChild(typingDiv);
        scrollToBottom();
    }

    function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    function setSendButtonState(enabled) {
        const sendButton = document.getElementById('sendButton');
        sendButton.disabled = !enabled;
        isWaitingForResponse = !enabled;
    }

    async function getOpenAIResponse(userMessage) {
        try {
            const currentCulture = new URLSearchParams(window.location.search).get('culture') || 'en';
            // Call the OpenAI API endpoint
            console.log('Sending request to OpenAI API...');
            const response = await fetch('/TextInterview?handler=OpenAIChat&culture=' + currentCulture, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({
                    message: userMessage,
                    interviewId: window.interviewId
                })
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            return data;
        } catch (error) {
            console.error('Error calling OpenAI API:', error);

            // Fallback responses if API fails
            const fallbackResponses = [
                "That's a great point! Can you elaborate on how you handled that situation?",
                "Interesting perspective. What would you do differently if you faced that challenge again?",
                "Thank you for sharing that experience. It shows your problem-solving skills. Now, let me ask you another question: How do you handle working under pressure?",
                "Excellent answer! It demonstrates your leadership abilities. What's your approach to motivating team members?",
                "That's very insightful. How do you stay updated with industry trends and new technologies?",
                "Great example! Can you tell me about a time when you had to adapt to a major change at work?",
                "That's a valuable experience. How do you prioritize tasks when you have multiple deadlines?",
                "Thank you for that detailed response. What are your career goals for the next 3-5 years?"
            ];

            // Return a fallback response with the correct structure
            return {
                response: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)],
                isComplete: false
            };
        }
    }

    function scrollToBottom() {
        const chatContainer = document.querySelector('.chat-container');
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function showInterviewComplete(summary) {
        const chatMessages = document.getElementById('chatMessages');

        // Add completion banner
        const completionBanner = document.createElement('div');
        completionBanner.className = 'interview-completion-banner';
        completionBanner.innerHTML = `
            <div class="completion-header">
                <i class="bi bi-check-circle-fill"></i>
                <h3>Interview Complete!</h3>
            </div>
            <p>Thank you for participating in this interview. Here's your comprehensive summary:</p>
        `;
        chatMessages.appendChild(completionBanner);

        // Add summary
        const summaryDiv = document.createElement('div');
        summaryDiv.className = 'interview-summary';
        summaryDiv.innerHTML = `
            <div class="summary-content">
                <h4>Interview Summary & Analysis</h4>
                <div class="summary-text">${summary}</div>
            </div>
        `;
        chatMessages.appendChild(summaryDiv);

        scrollToBottom();
    }

    function finishInterview() {
        if (confirm('Are you sure you want to finish this interview? This action cannot be undone.')) {
            // In real implementation, this would save the interview results to database
            alert('Interview finished! Redirecting to dashboard...');
            const currentCulture = new URLSearchParams(window.location.search).get('culture') || 'en';
            window.location.href = `/Dashboard?culture=${currentCulture}`;
        }
    }
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
